# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LoginWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import  QMainWindow, QTableWidget, QTableWidgetItem, QDialog, QWidget
from PyQt5.QtGui import QFont, QColor, QBrush
from PyQt5.QtCore import Qt
import sys
import os
import csv
from PyQt5.QtWidgets import QDialog, QLabel, QLineEdit, QPushButton, QMessageBox, QVBoxLayout
from PyQt5.QtGui import QFont, QPalette,  QColor
from PyQt5.QtCore import Qt
from csv import DictReader, DictWriter
csv_file = 'Student_Data.csv'


class Ui_LoginWindow(object):
    def setupUi(self, LoginWindow):
        LoginWindow.setObjectName("LoginWindow")
        LoginWindow.resize(571, 572)
        font = QtGui.QFont()
        font.setPointSize(11)
        LoginWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(LoginWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.top_heading = QtWidgets.QLabel(self.centralwidget)
        self.top_heading.setGeometry(QtCore.QRect(40, 40, 501, 41))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.top_heading.setFont(font)
        self.top_heading.setObjectName("top_heading")
        self.CNIC_label = QtWidgets.QLabel(self.centralwidget)
        self.CNIC_label.setGeometry(QtCore.QRect(100, 110, 171, 16))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(11)
        self.CNIC_label.setFont(font)
        self.CNIC_label.setObjectName("CNIC_label")
        self.CNIC_input = QtWidgets.QLineEdit(self.centralwidget)
        self.CNIC_input.setGeometry(QtCore.QRect(90, 140, 301, 31))
        self.CNIC_input.setObjectName("CNIC_input")
        self.Password_label = QtWidgets.QLabel(self.centralwidget)
        self.Password_label.setGeometry(QtCore.QRect(100, 200, 141, 16))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(11)
        self.Password_label.setFont(font)
        self.Password_label.setObjectName("Password_label")
        self.Login_button = QtWidgets.QPushButton(self.centralwidget)
        self.Login_button.setGeometry(QtCore.QRect(190, 310, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.Login_button.setFont(font)
        self.Login_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Login_button.setObjectName("Login_button")
        self.password_input = QtWidgets.QLineEdit(self.centralwidget)
        self.password_input.setGeometry(QtCore.QRect(90, 230, 301, 31))
        self.password_input.setObjectName("password_input")
        LoginWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(LoginWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 571, 21))
        self.menubar.setObjectName("menubar")
        LoginWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(LoginWindow)
        self.statusbar.setObjectName("statusbar")
        LoginWindow.setStatusBar(self.statusbar)

        self.retranslateUi(LoginWindow)
        QtCore.QMetaObject.connectSlotsByName(LoginWindow)

    def retranslateUi(self, LoginWindow):
        _translate = QtCore.QCoreApplication.translate
        LoginWindow.setWindowTitle(_translate("LoginWindow", "LoginWindow"))
        self.top_heading.setText(_translate("LoginWindow", "Welcome in Student Management System"))
        self.CNIC_label.setText(_translate("LoginWindow", "Enter Your CNIC Here:"))
        self.Password_label.setText(_translate("LoginWindow", "Your Password:"))
        self.Login_button.setText(_translate("LoginWindow", "LOGIN"))

        self.Login_button.clicked.connect(self.login)
        
    def login(self):
        if self.CNIC_input.text() == "" or self.password_input.text() == "":
            self.messagebox = QtWidgets.QMessageBox()
            self.messagebox.setIcon(QtWidgets.QMessageBox.Information)
            self.messagebox.setText("Kindly Fill all the fields")
            self.messagebox.setWindowTitle("Error")
            self.messagebox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            self.messagebox.exec_()
        elif self.CNIC_input.text() != "admin" and self.password_input.text() != "admin":
                self.messagebox = QtWidgets.QMessageBox()
                self.messagebox.setIcon(QtWidgets.QMessageBox.Information)
                self.messagebox.setText("Invalid Credentials")
                self.messagebox.setWindowTitle("Error")
                self.messagebox.setStandardButtons(QtWidgets.QMessageBox.Ok)
                self.messagebox.exec_()
            
        elif self.CNIC_input.text() == "admin" and self.password_input.text() == "admin":
            LoginWindow.hide()
            ActionWindow.show()
            
        else:
            self.messagebox = QtWidgets.QMessageBox()
            self.messagebox.setIcon(QtWidgets.QMessageBox.Information)
            self.messagebox.setText("Either CNIC or Password is Wrong")
            self.messagebox.setWindowTitle("Error")
            self.messagebox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            self.messagebox.exec_()
                        
        

class Ui_ActionWindow(object):
    def setupUi(self, ActionWindow):
        ActionWindow.setObjectName("ActionWindow")
        ActionWindow.resize(599, 590)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(12)
        ActionWindow.setFont(font)
        ActionWindow.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.centralwidget = QtWidgets.QWidget(ActionWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.heading_actionswindow = QtWidgets.QLabel(self.centralwidget)
        self.heading_actionswindow.setGeometry(QtCore.QRect(170, 40, 321, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.heading_actionswindow.setFont(font)
        self.heading_actionswindow.setObjectName("heading_actionswindow")
        self.addstudent_actions = QtWidgets.QPushButton(self.centralwidget)
        self.addstudent_actions.setGeometry(QtCore.QRect(90, 120, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.addstudent_actions.setFont(font)
        self.addstudent_actions.setObjectName("addstudent_actions")
        self.remove_actions = QtWidgets.QPushButton(self.centralwidget)
        self.remove_actions.setGeometry(QtCore.QRect(340, 260, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.remove_actions.setFont(font)
        self.remove_actions.setObjectName("remove_actions")
        self.addfee_actions = QtWidgets.QPushButton(self.centralwidget)
        self.addfee_actions.setGeometry(QtCore.QRect(90, 330, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.addfee_actions.setFont(font)
        self.addfee_actions.setObjectName("addfee_actions")
        self.attendence_analysis_actions = QtWidgets.QPushButton(self.centralwidget)
        self.attendence_analysis_actions.setGeometry(QtCore.QRect(90, 260, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.attendence_analysis_actions.setFont(font)
        self.attendence_analysis_actions.setObjectName("attendence_analysis_actions")
        self.addgrades_actions = QtWidgets.QPushButton(self.centralwidget)
        self.addgrades_actions.setGeometry(QtCore.QRect(90, 190, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.addgrades_actions.setFont(font)
        self.addgrades_actions.setObjectName("addgrades_actions")
        self.emailallfeedefaultors_actions = QtWidgets.QPushButton(self.centralwidget)
        self.emailallfeedefaultors_actions.setGeometry(QtCore.QRect(340, 400, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.emailallfeedefaultors_actions.setFont(font)
        self.emailallfeedefaultors_actions.setObjectName("emailallfeedefaultors_actions")
        self.timetable_actions = QtWidgets.QPushButton(self.centralwidget)
        self.timetable_actions.setGeometry(QtCore.QRect(340, 120, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.timetable_actions.setFont(font)
        self.timetable_actions.setObjectName("timetable_actions")
        self.selectivedefaultor_actions = QtWidgets.QPushButton(self.centralwidget)
        self.selectivedefaultor_actions.setGeometry(QtCore.QRect(90, 400, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(8)
        self.selectivedefaultor_actions.setFont(font)
        self.selectivedefaultor_actions.setObjectName("selectivedefaultor_actions")
        self.allstudentdetails_actions = QtWidgets.QPushButton(self.centralwidget)
        self.allstudentdetails_actions.setGeometry(QtCore.QRect(340, 330, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.allstudentdetails_actions.setFont(font)
        self.allstudentdetails_actions.setObjectName("allstudentdetails_actions")
        self.selectivestudentdetails_actions = QtWidgets.QPushButton(self.centralwidget)
        self.selectivestudentdetails_actions.setGeometry(QtCore.QRect(340, 470, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.selectivestudentdetails_actions.setFont(font)
        self.selectivestudentdetails_actions.setObjectName("selectivestudentdetails_actions")
        self.addtimetable_actions = QtWidgets.QPushButton(self.centralwidget)
        self.addtimetable_actions.setGeometry(QtCore.QRect(340, 190, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.addtimetable_actions.setFont(font)
        self.addtimetable_actions.setObjectName("addtimetable_actions")
        self.selectivestudentdetails_actions_2 = QtWidgets.QPushButton(self.centralwidget)
        self.selectivestudentdetails_actions_2.setGeometry(QtCore.QRect(90, 470, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.selectivestudentdetails_actions_2.setFont(font)
        self.selectivestudentdetails_actions_2.setObjectName("selectivestudentdetails_actions_2")
        ActionWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(ActionWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 599, 21))
        self.menubar.setObjectName("menubar")
        ActionWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(ActionWindow)
        self.statusbar.setObjectName("statusbar")
        ActionWindow.setStatusBar(self.statusbar)

        self.retranslateUi(ActionWindow)
        QtCore.QMetaObject.connectSlotsByName(ActionWindow)

    def retranslateUi(self, ActionWindow):
        _translate = QtCore.QCoreApplication.translate
        ActionWindow.setWindowTitle(_translate("ActionWindow", "ActionsWindow"))
        self.heading_actionswindow.setText(_translate("ActionWindow", "Actions You can Perform:"))
        self.addstudent_actions.setText(_translate("ActionWindow", "Add Student Details"))
        self.remove_actions.setText(_translate("ActionWindow", "Remove Student"))
        self.addfee_actions.setText(_translate("ActionWindow", "Add Fee Details of Students"))
        self.attendence_analysis_actions.setText(_translate("ActionWindow", "Fee/Attendance Analysis"))
        self.addgrades_actions.setText(_translate("ActionWindow", "Add Grades "))
        self.emailallfeedefaultors_actions.setText(_translate("ActionWindow", "Email all Fee defaultors"))
        self.timetable_actions.setText(_translate("ActionWindow", "Time Table of Students"))
        self.selectivedefaultor_actions.setText(_translate("ActionWindow", "Email Selective Fee defaultor"))
        self.allstudentdetails_actions.setText(_translate("ActionWindow", "Show all Student Details"))
        self.selectivestudentdetails_actions.setText(_translate("ActionWindow", "Show Selective Student"))
        self.addtimetable_actions.setText(_translate("ActionWindow", "Add Time Table"))
        self.selectivestudentdetails_actions_2.setText(_translate("ActionWindow", "Remove all Database"))
    
        self.addstudent_actions.clicked.connect(self.addstudent)
        self.addfee_actions.clicked.connect(self.addfee)
        self.remove_actions.clicked.connect(self.remove)
        self.addgrades_actions.clicked.connect(self.addgrades)
        self.allstudentdetails_actions.clicked.connect(self.allstudentdetails)
        self.selectivestudentdetails_actions.clicked.connect(self.selectivestudentdetails)
        self.addtimetable_actions.clicked.connect(self.addtimetable) 
        self.timetable_actions.clicked.connect(self.timetable)  
        self.selectivestudentdetails_actions_2.clicked.connect(self.removeall)
        self.attendence_analysis_actions.clicked.connect(self.attendanceanalysis)
        
        
        
    def attendanceanalysis(self):
        data = []
        with open("Book1.csv", "r") as file:
            csv_reader = csv.reader(file)
            header = next(csv_reader)  # Skip the header row
            for row in csv_reader:
                data_row = []
                for value in row[1:]:
                    if value == 'P':
                        data_row.append(1)
                        # Assign 1 for 'P'
                    elif value == 'A':
                        data_row.append(0)
                        # Assign 0 for 'A'
                    elif value != '':
                        data_row.append(float(value))
                    else:
                        data_row.append(np.nan)  # Assign NaN for empty strings
                data.append(data_row)

        # Converting data to a numpy array
        data = np.array(data)

        # Plotting the heatmap
        ax = sns.heatmap(data, annot=True, fmt=".0f", cmap="YlGnBu")

        # Hiding values of 0 and 1
        for text in ax.texts:
            value = float(text.get_text())
            if value == 0 or value == 1:
                text.set_text('')

        # Setting axis labels and title
        plt.xlabel("Day")
        plt.ylabel("Student")
        plt.title("Attendance Heatmap")

        # Displaying the plotted heatmap
        plt.show()
        
        
        
        
        
    def removeall(self):
        os.remove('./Student_updatedData.csv') 
        self.messagebox = QtWidgets.QMessageBox()
        self.messagebox.setIcon(QtWidgets.QMessageBox.Information)
        self.messagebox.setText("Your Database is deleted!")
        self.messagebox.setWindowTitle("Success")
        self.messagebox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        self.messagebox.exec_()    
        

        
    def addstudent(self):
        ActionWindow.hide()
        StudentRegistrationForm.show()
        
    def addfee(self):
        ActionWindow.hide()
        FeeWindow.show()
        
    def remove(self):
        ActionWindow.hide()
        dialog.show()
 
    def addgrades(self):
        ActionWindow.hide()
        GradeWindow.show()
 
    def selectivestudentdetails(self):
        ActionWindow.hide()
        SelectiveWindow.show()
        
    
    def showattendance(self):
        ActionWindow.hide()
        AttendanceWindow.show()
    
        
    def addtimetable(self):
        ActionWindow.hide()
        AddTimeWindow.show()
        
    
    def timetable(self):
        ActionWindow.hide()
        viewer.show()
    
    
    def allstudentdetails(self):
        ActionWindow.hide()
        AllStudentsWindow.show()
    
 
class Ui_StudentRegistrationForm(object):
    def setupUi(self, StudentRegistrationForm):
        StudentRegistrationForm.setObjectName("StudentRegistrationForm")
        StudentRegistrationForm.resize(739, 600)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(15)
        StudentRegistrationForm.setFont(font)
        self.centralwidget = QtWidgets.QWidget(StudentRegistrationForm)
        self.centralwidget.setObjectName("centralwidget")
        self.name_input_addstudent = QtWidgets.QLineEdit(self.centralwidget)
        self.name_input_addstudent.setGeometry(QtCore.QRect(140, 90, 231, 31))
        self.name_input_addstudent.setObjectName("name_input_addstudent")
        self.regnumber_input_addstudent = QtWidgets.QLineEdit(self.centralwidget)
        self.regnumber_input_addstudent.setGeometry(QtCore.QRect(140, 170, 231, 31))
        self.regnumber_input_addstudent.setObjectName("regnumber_input_addstudent")
        self.email_input_addstudent = QtWidgets.QLineEdit(self.centralwidget)
        self.email_input_addstudent.setGeometry(QtCore.QRect(140, 250, 231, 31))
        self.email_input_addstudent.setObjectName("email_input_addstudent")
        self.father_input_addstudent = QtWidgets.QLineEdit(self.centralwidget)
        self.father_input_addstudent.setGeometry(QtCore.QRect(140, 330, 231, 31))
        self.father_input_addstudent.setObjectName("father_input_addstudent")
        self.class_input_addstudent = QtWidgets.QLineEdit(self.centralwidget)
        self.class_input_addstudent.setGeometry(QtCore.QRect(140, 410, 231, 31))
        self.class_input_addstudent.setObjectName("class_input_addstudent")
        self.save_button = QtWidgets.QPushButton(self.centralwidget)
        self.save_button.setGeometry(QtCore.QRect(310, 490, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(10)
        self.save_button.setFont(font)
        self.save_button.setObjectName("save_button")
        self.CNIC_input_addstudent = QtWidgets.QLineEdit(self.centralwidget)
        self.CNIC_input_addstudent.setGeometry(QtCore.QRect(490, 90, 231, 31))
        self.CNIC_input_addstudent.setObjectName("CNIC_input_addstudent")
        self.address_input_addstudent = QtWidgets.QLineEdit(self.centralwidget)
        self.address_input_addstudent.setGeometry(QtCore.QRect(490, 170, 231, 31))
        self.address_input_addstudent.setObjectName("address_input_addstudent")
        self.phone_input_addstudent = QtWidgets.QLineEdit(self.centralwidget)
        self.phone_input_addstudent.setGeometry(QtCore.QRect(490, 250, 231, 31))
        self.phone_input_addstudent.setObjectName("phone_input_addstudent")
        self.fathercontact_input_addstudent = QtWidgets.QLineEdit(self.centralwidget)
        self.fathercontact_input_addstudent.setGeometry(QtCore.QRect(490, 330, 231, 31))
        self.fathercontact_input_addstudent.setObjectName("fathercontact_input_addstudent")
        self.name_label_addstudent = QtWidgets.QLabel(self.centralwidget)
        self.name_label_addstudent.setGeometry(QtCore.QRect(140, 60, 141, 16))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(11)
        self.name_label_addstudent.setFont(font)
        self.name_label_addstudent.setObjectName("name_label_addstudent")
        self.CNIC_label_addstudent = QtWidgets.QLabel(self.centralwidget)
        self.CNIC_label_addstudent.setGeometry(QtCore.QRect(490, 60, 141, 16))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(11)
        self.CNIC_label_addstudent.setFont(font)
        self.CNIC_label_addstudent.setObjectName("CNIC_label_addstudent")
        self.regnumber_label_addstudent = QtWidgets.QLabel(self.centralwidget)
        self.regnumber_label_addstudent.setGeometry(QtCore.QRect(140, 140, 171, 16))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(11)
        self.regnumber_label_addstudent.setFont(font)
        self.regnumber_label_addstudent.setObjectName("regnumber_label_addstudent")
        self.phone_label_addstudent = QtWidgets.QLabel(self.centralwidget)
        self.phone_label_addstudent.setGeometry(QtCore.QRect(490, 220, 141, 16))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(11)
        self.phone_label_addstudent.setFont(font)
        self.phone_label_addstudent.setObjectName("phone_label_addstudent")
        self.address_label_addstudent = QtWidgets.QLabel(self.centralwidget)
        self.address_label_addstudent.setGeometry(QtCore.QRect(490, 140, 141, 16))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(11)
        self.address_label_addstudent.setFont(font)
        self.address_label_addstudent.setObjectName("address_label_addstudent")
        self.email_label_addstudent = QtWidgets.QLabel(self.centralwidget)
        self.email_label_addstudent.setGeometry(QtCore.QRect(140, 220, 141, 16))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(11)
        self.email_label_addstudent.setFont(font)
        self.email_label_addstudent.setObjectName("email_label_addstudent")
        self.fathercontact_label_addstudent = QtWidgets.QLabel(self.centralwidget)
        self.fathercontact_label_addstudent.setGeometry(QtCore.QRect(490, 300, 141, 16))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(11)
        self.fathercontact_label_addstudent.setFont(font)
        self.fathercontact_label_addstudent.setObjectName("fathercontact_label_addstudent")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(490, 380, 141, 16))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(11)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.father_label_addstudent = QtWidgets.QLabel(self.centralwidget)
        self.father_label_addstudent.setGeometry(QtCore.QRect(140, 300, 141, 16))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(11)
        self.father_label_addstudent.setFont(font)
        self.father_label_addstudent.setObjectName("father_label_addstudent")
        self.class_label_addstudent = QtWidgets.QLabel(self.centralwidget)
        self.class_label_addstudent.setGeometry(QtCore.QRect(140, 380, 171, 16))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(11)
        self.class_label_addstudent.setFont(font)
        self.class_label_addstudent.setObjectName("class_label_addstudent")
        self.comboBox_addstudent = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_addstudent.setGeometry(QtCore.QRect(490, 410, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(10)
        self.comboBox_addstudent.setFont(font)
        self.comboBox_addstudent.setObjectName("comboBox_addstudent")
        self.comboBox_addstudent.addItem("")
        self.comboBox_addstudent.addItem("")
        self.comboBox_addstudent.addItem("")
        self.heading_addstudent = QtWidgets.QLabel(self.centralwidget)
        self.heading_addstudent.setGeometry(QtCore.QRect(250, 20, 311, 20))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.heading_addstudent.setFont(font)
        self.heading_addstudent.setObjectName("heading_addstudent")
        self.exit_button = QtWidgets.QPushButton(self.centralwidget)
        self.exit_button.setGeometry(QtCore.QRect(440, 490, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(10)
        self.exit_button.setFont(font)
        self.exit_button.setObjectName("exit_button")
        self.backButton = QtWidgets.QPushButton(self.centralwidget)
        self.backButton.setGeometry(QtCore.QRect(170, 490, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(10)
        self.backButton.setFont(font)
        self.backButton.setObjectName("backButton")
        StudentRegistrationForm.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(StudentRegistrationForm)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 739, 21))
        self.menubar.setObjectName("menubar")
        StudentRegistrationForm.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(StudentRegistrationForm)
        self.statusbar.setObjectName("statusbar")
        StudentRegistrationForm.setStatusBar(self.statusbar)

        self.retranslateUi(StudentRegistrationForm)
        QtCore.QMetaObject.connectSlotsByName(StudentRegistrationForm)

    def retranslateUi(self, StudentRegistrationForm):
        _translate = QtCore.QCoreApplication.translate
        StudentRegistrationForm.setWindowTitle(_translate("StudentRegistrationForm", "StudentRegistrationForm"))
        self.save_button.setText(_translate("StudentRegistrationForm", "Save Details"))
        self.name_label_addstudent.setText(_translate("StudentRegistrationForm", "Name Of Student:"))
        self.CNIC_label_addstudent.setText(_translate("StudentRegistrationForm", "CNIC Number:"))
        self.regnumber_label_addstudent.setText(_translate("StudentRegistrationForm", "Registration Number:"))
        self.phone_label_addstudent.setText(_translate("StudentRegistrationForm", "Phone Number:"))
        self.address_label_addstudent.setText(_translate("StudentRegistrationForm", "Home Address:"))
        self.email_label_addstudent.setText(_translate("StudentRegistrationForm", "E-mail Address:"))
        self.fathercontact_label_addstudent.setText(_translate("StudentRegistrationForm", "Father Contact:"))
        self.label_8.setText(_translate("StudentRegistrationForm", "Health Status:"))
        self.father_label_addstudent.setText(_translate("StudentRegistrationForm", "Father Name:"))
        self.class_label_addstudent.setText(_translate("StudentRegistrationForm", "Class/Year of Study:"))
        self.comboBox_addstudent.setItemText(0, _translate("StudentRegistrationForm", "Mental Illness"))
        self.comboBox_addstudent.setItemText(1, _translate("StudentRegistrationForm", "Healthy"))
        self.comboBox_addstudent.setItemText(2, _translate("StudentRegistrationForm", "Handicapped"))
        self.heading_addstudent.setText(_translate("StudentRegistrationForm", "Student Registration Form:"))
        self.exit_button.setText(_translate("StudentRegistrationForm", "Exit"))
        self.backButton.setText(_translate("StudentRegistrationForm", "Back"))

        self.backButton.clicked.connect(self.backClicked)
        self.save_button.clicked.connect(self.save_student_details)
            
        savebutton = self.save_button
        savebutton.clicked.connect(self.save_student_details)
        exitbutton = self.exit_button
        exitbutton.clicked.connect(StudentRegistrationForm.close)
        
    def backClicked(self):
        StudentRegistrationForm.hide()
        ActionWindow.show()   
        
    def save_student_details(self):
        name = self.name_input_addstudent.text()
        regnumber = self.regnumber_input_addstudent.text()
        email = self.email_input_addstudent.text()
        father = self.father_input_addstudent.text()
        classyear = self.class_input_addstudent.text()
        cnic = self.CNIC_input_addstudent.text()
        address = self.address_input_addstudent.text()
        phone = self.phone_input_addstudent.text()
        fathercontact = self.fathercontact_input_addstudent.text()
        healthstatus = self.comboBox_addstudent.currentText()
        #print(name, regnumber, email, father, classyear, cnic, address, phone, fathercontact, healthstatus)
    
        if name and regnumber and email and father and classyear and cnic and address and phone and fathercontact and healthstatus:
            student_details = {'Name':name,'Reg Number':regnumber,'Email':email,'Father':father,'Class Year':classyear,'Father Contact':fathercontact,'Phone Number':phone, 'Health Status':healthstatus, 'Address':address, 'CNIC':cnic, 'Mathematics': None, 'Chemistry': None, 'Physics' : None, 'Biology': None, 'Pak Studies': None, 'Urdu' : None, 'English' : None, 'Islamic Studies' : None  , 'Fee of January':  None, 'Fee of February':  None, 'Fee of March':  None, 'Fee of April':  None, 'Fee of May':  None, 'Fee of June':  None, 'Fee of July':  None, 'Fee of August':  None, 'Fee of September':  None, 'Fee of October':  None, 'Fee of November':  None, 'Fee of December':  None, 'Lecture 01': None, 'Lecture 02' : None, 'Lecture 03' : None ,'Lecture 04' : None}
            create_csv(self,student_details)
            self.name_input_addstudent.clear()
            self.regnumber_input_addstudent.clear()
            self.email_input_addstudent.clear()
            self.father_input_addstudent.clear()
            self.class_input_addstudent.clear()
            self.CNIC_input_addstudent.clear()
            self.address_input_addstudent.clear()
            self.phone_input_addstudent.clear()
            self.fathercontact_input_addstudent.clear()
            self.comboBox_addstudent.clear()
        
    
        
def create_csv(self,student_details):
    with open('Student_Data.csv', 'a', newline='') as csvfile:
        writer = csv.DictWriter(csvfile,lineterminator='\n', fieldnames=student_details.keys())
        if csvfile.tell() == 0:
        # Write the header if the file is empty
            writer.writeheader()
    # Write the data to the CSV file
        writer.writerow(student_details)
        self.messagebox = QtWidgets.QMessageBox()
        self.messagebox.setIcon(QtWidgets.QMessageBox.Information)
        self.messagebox.setText("Your details have been saved successfully!")
        self.messagebox.setWindowTitle("Success")
        self.messagebox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        self.messagebox.exec_()
        
      
      

class Ui_FeeWindow(object):
    def setupUi(self, FeeWindow):
        FeeWindow.setObjectName("FeeWindow")
        FeeWindow.resize(371, 450)
        self.centralwidget = QtWidgets.QWidget(FeeWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.heading_label_feepage = QtWidgets.QLabel(self.centralwidget)
        self.heading_label_feepage.setGeometry(QtCore.QRect(40, 50, 321, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.heading_label_feepage.setFont(font)
        self.heading_label_feepage.setObjectName("heading_label_feepage")
        self.comboBox_month_feepage = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_month_feepage.setGeometry(QtCore.QRect(70, 210, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.comboBox_month_feepage.setFont(font)
        self.comboBox_month_feepage.setObjectName("comboBox_month_feepage")
        self.comboBox_month_feepage.addItem("")
        self.comboBox_month_feepage.addItem("")
        self.comboBox_month_feepage.addItem("")
        self.comboBox_month_feepage.addItem("")
        self.comboBox_month_feepage.addItem("")
        self.comboBox_month_feepage.addItem("")
        self.comboBox_month_feepage.addItem("")
        self.comboBox_month_feepage.addItem("")
        self.comboBox_month_feepage.addItem("")
        self.comboBox_month_feepage.addItem("")
        self.comboBox_month_feepage.addItem("")
        self.comboBox_month_feepage.addItem("")
        self.regnumber_label_feepage = QtWidgets.QLabel(self.centralwidget)
        self.regnumber_label_feepage.setGeometry(QtCore.QRect(70, 100, 231, 21))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.regnumber_label_feepage.setFont(font)
        self.regnumber_label_feepage.setObjectName("regnumber_label_feepage")
        self.regnumber_input_feepage = QtWidgets.QLineEdit(self.centralwidget)
        self.regnumber_input_feepage.setGeometry(QtCore.QRect(70, 130, 231, 31))
        self.regnumber_input_feepage.setObjectName("regnumber_input_feepage")
        self.month_label_feepage = QtWidgets.QLabel(self.centralwidget)
        self.month_label_feepage.setGeometry(QtCore.QRect(70, 180, 231, 21))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.month_label_feepage.setFont(font)
        self.month_label_feepage.setObjectName("month_label_feepage")
        self.amount_label_feepage = QtWidgets.QLabel(self.centralwidget)
        self.amount_label_feepage.setGeometry(QtCore.QRect(70, 260, 231, 21))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.amount_label_feepage.setFont(font)
        self.amount_label_feepage.setObjectName("amount_label_feepage")
        self.amount_input_feepage = QtWidgets.QLineEdit(self.centralwidget)
        self.amount_input_feepage.setGeometry(QtCore.QRect(70, 290, 231, 31))
        self.amount_input_feepage.setObjectName("amount_input_feepage")
        self.addButton_feepage = QtWidgets.QPushButton(self.centralwidget)
        self.addButton_feepage.setGeometry(QtCore.QRect(60, 352, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.addButton_feepage.setFont(font)
        self.addButton_feepage.setObjectName("addButton_feepage")
        self.back_fee = QtWidgets.QPushButton(self.centralwidget)
        self.back_fee.setGeometry(QtCore.QRect(210, 350, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.back_fee.setFont(font)
        self.back_fee.setObjectName("back_fee")
        FeeWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(FeeWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 371, 21))
        self.menubar.setObjectName("menubar")
        FeeWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(FeeWindow)
        self.statusbar.setObjectName("statusbar")
        FeeWindow.setStatusBar(self.statusbar)

        self.retranslateUi(FeeWindow)
        QtCore.QMetaObject.connectSlotsByName(FeeWindow)

    def retranslateUi(self, FeeWindow):
        _translate = QtCore.QCoreApplication.translate
        FeeWindow.setWindowTitle(_translate("FeeWindow", "FeeWindow"))
        self.heading_label_feepage.setText(_translate("FeeWindow", "Fee Management of Students"))
        self.comboBox_month_feepage.setItemText(0, _translate("FeeWindow", "January 2023"))
        self.comboBox_month_feepage.setItemText(1, _translate("FeeWindow", "February 2023"))
        self.comboBox_month_feepage.setItemText(2, _translate("FeeWindow", "March 2023"))
        self.comboBox_month_feepage.setItemText(3, _translate("FeeWindow", "April 2023"))
        self.comboBox_month_feepage.setItemText(4, _translate("FeeWindow", "May 2023"))
        self.comboBox_month_feepage.setItemText(5, _translate("FeeWindow", "June 2023"))
        self.comboBox_month_feepage.setItemText(6, _translate("FeeWindow", "July 2023"))
        self.comboBox_month_feepage.setItemText(7, _translate("FeeWindow", "August 2023"))
        self.comboBox_month_feepage.setItemText(8, _translate("FeeWindow", "September 2023"))
        self.comboBox_month_feepage.setItemText(9, _translate("FeeWindow", "October 2023"))
        self.comboBox_month_feepage.setItemText(10, _translate("FeeWindow", "November 2023"))
        self.comboBox_month_feepage.setItemText(11, _translate("FeeWindow", "December 2023"))
        self.regnumber_label_feepage.setText(_translate("FeeWindow", "Registration Number of Student:"))
        self.month_label_feepage.setText(_translate("FeeWindow", "Choose Month Given Below:"))
        self.amount_label_feepage.setText(_translate("FeeWindow", "Add Amount of Fee:"))
        self.addButton_feepage.setText(_translate("FeeWindow", "Add/Update Fee"))
        self.back_fee.setText(_translate("FeeWindow", "Back"))
        self.back_fee.clicked.connect(backfunc)
        
        self.addButton_feepage.clicked.connect(self.addFee)
    
    

    
    def addFee(self):
        regnumber= self.regnumber_input_feepage.text()
        amount=self.amount_input_feepage.text()
        month=self.comboBox_month_feepage.currentText()
        #print(regnumber,amount,month)
        
        if regnumber and amount and month:
           self.regnumber_input_feepage.clear()
           self.amount_input_feepage.clear()
           self.comboBox_month_feepage.clear()
           self.createFee(regnumber,amount,month)
           
           
    def createFee(self, regnumber,amount,month):
        
        rows = []
        found = False
        Month_columns = {
            'January 2023': 18,
            'February 2023': 19,
            'March 2023': 20,
            'April 2023': 21,
            'May 2023': 22,
            'June 2023': 23,
            'July 2023': 24,
            'August 2023': 25,
            'September 2023': 26,
            'October 2023': 27,
            'November 2023': 28,
            'December 2023': 29,
        }

        with open('./Student_Data.csv', 'r') as file:
            reader = csv.reader(file)
            rows = list(reader)

            for row in rows:
                if row[1] == regnumber:
                    if month in Month_columns:
                        row[Month_columns[month]] = amount
                        found = True
                        break
        
        if not found:
            self.messagebox = QtWidgets.QMessageBox()
            self.messagebox.setIcon(QtWidgets.QMessageBox.Information)
            self.messagebox.setText("Registration Number not found")
            self.messagebox.setWindowTitle("Error")
            self.messagebox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            self.messagebox.exec_()
            return
        
        with open('./Student_Data.csv', 'w', newline='') as file:
            writer = csv.writer(file)
            for row in rows:
                writer.writerow(row)
        self.messagebox = QtWidgets.QMessageBox()
        self.messagebox.setIcon(QtWidgets.QMessageBox.Information)
        self.messagebox.setText("Data appended.")
        self.messagebox.setWindowTitle("Success")
        self.messagebox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        self.messagebox.exec_()
        FeeWindow.close() 
        
        
def backfunc():
    FeeWindow.hide()
    ActionWindow.show()
            



class DeleteConfirmationDialog(QDialog):
    def setup_ui(self):
        self.setWindowTitle("Delete Confirmation")
        self.setGeometry(100, 100, 400, 200)

        # Labels and line edits for registration number and CNIC
        self.reg_label = QLabel("Registration Number:")
        self.reg_line_edit = QLineEdit()
        self.cnic_label = QLabel("CNIC:")
        self.cnic_line_edit = QLineEdit()

        # Delete button
        self.delete_button = QPushButton("Delete")
        self.delete_button.clicked.connect(self.delete_row)

        # Font
        font = QFont("Poppins", 12)
        self.reg_label.setFont(font)
        self.cnic_label.setFont(font)
        self.delete_button.setFont(font)

        # Alignment
        self.reg_label.setAlignment(Qt.AlignCenter)
        self.cnic_label.setAlignment(Qt.AlignCenter)

        # Styling
        self.setStyleSheet(
            "QLabel { color: #333; }"
            "QLineEdit { padding: 6px; font-size: 12px; }"
            "QPushButton { padding: 10px 20px; font-size: 12px; background-color: #45a049; color: white; text-align: center; }"
            "QPushButton:hover { background-color: #39893e; }"
        )

        # Set button color using palette
        palette = self.delete_button.palette()
        palette.setColor(QPalette.Button, QColor("#45a049"))
        self.delete_button.setPalette(palette)

        # Layout
        layout = QVBoxLayout()
        layout.addWidget(self.reg_label)
        layout.addWidget(self.reg_line_edit)
        layout.addWidget(self.cnic_label)
        layout.addWidget(self.cnic_line_edit)
        layout.addWidget(self.delete_button)

        self.setLayout(layout)

    def delete_row(self):
        registration_number = self.reg_line_edit.text()
        cnic = self.cnic_line_edit.text()

        # Perform the deletion based on the registration number and CNIC
        found = False
        rows_to_keep = []
        with open('Student_Data.csv', 'r') as file:
            reader = csv.reader(file)
            data = list(reader)
            for row in data:
                if row[1] != registration_number or row[9] != cnic:
                    rows_to_keep.append(row)
                else:
                    found = True

        if found:
            with open('Student_Data.csv', 'w', newline='') as file:
                writer = csv.writer(file)
                writer.writerows(rows_to_keep)
            
            QMessageBox.information(self, "Deletion Successful", f"Registration Number '{registration_number}' has been deleted.")
            self.accept()
        else:
            QMessageBox.warning(self, "Deletion Failed", "Invalid Registration Number or CNIC.")

    


class Ui_GradeWindow(object):
    def setupUi(self, GradeWindow):
        GradeWindow.setObjectName("GradeWindow")
        GradeWindow.resize(371, 450)
        self.centralwidget = QtWidgets.QWidget(GradeWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.heading_label_gradepage = QtWidgets.QLabel(self.centralwidget)
        self.heading_label_gradepage.setGeometry(QtCore.QRect(60, 50, 321, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.heading_label_gradepage.setFont(font)
        self.heading_label_gradepage.setObjectName("heading_label_gradepage")
        self.comboBox_grade_gradepage = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_grade_gradepage.setGeometry(QtCore.QRect(70, 290, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.comboBox_grade_gradepage.setFont(font)
        self.comboBox_grade_gradepage.setObjectName("comboBox_grade_gradepage")
        self.comboBox_grade_gradepage.addItem("")
        self.comboBox_grade_gradepage.addItem("")
        self.comboBox_grade_gradepage.addItem("")
        self.comboBox_grade_gradepage.addItem("")
        self.comboBox_grade_gradepage.addItem("")
        self.comboBox_grade_gradepage.addItem("")
        self.comboBox_grade_gradepage.addItem("")
        self.comboBox_grade_gradepage.addItem("")
        self.comboBox_grade_gradepage.addItem("")
        self.comboBox_grade_gradepage.addItem("")
        self.comboBox_grade_gradepage.addItem("")
        self.comboBox_grade_gradepage.addItem("")
        self.regnumber_label_gradepage = QtWidgets.QLabel(self.centralwidget)
        self.regnumber_label_gradepage.setGeometry(QtCore.QRect(70, 100, 231, 21))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.regnumber_label_gradepage.setFont(font)
        self.regnumber_label_gradepage.setObjectName("regnumber_label_gradepage")
        self.regnumber_input_gradepage = QtWidgets.QLineEdit(self.centralwidget)
        self.regnumber_input_gradepage.setGeometry(QtCore.QRect(70, 130, 231, 31))
        self.regnumber_input_gradepage.setObjectName("regnumber_input_gradepage")
        self.subject_label_gradepage = QtWidgets.QLabel(self.centralwidget)
        self.subject_label_gradepage.setGeometry(QtCore.QRect(70, 180, 231, 21))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.subject_label_gradepage.setFont(font)
        self.subject_label_gradepage.setObjectName("subject_label_gradepage")
        self.addGrade_gradepage = QtWidgets.QPushButton(self.centralwidget)
        self.addGrade_gradepage.setGeometry(QtCore.QRect(60, 350, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.addGrade_gradepage.setFont(font)
        self.addGrade_gradepage.setObjectName("addGrade_gradepage")
        self.grade_label_gradepage = QtWidgets.QLabel(self.centralwidget)
        self.grade_label_gradepage.setGeometry(QtCore.QRect(70, 260, 231, 21))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.grade_label_gradepage.setFont(font)
        self.grade_label_gradepage.setObjectName("grade_label_gradepage")
        self.comboBox_subject_gradepage = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_subject_gradepage.setGeometry(QtCore.QRect(70, 210, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.comboBox_subject_gradepage.setFont(font)
        self.comboBox_subject_gradepage.setObjectName("comboBox_subject_gradepage")
        self.comboBox_subject_gradepage.addItem("")
        self.comboBox_subject_gradepage.addItem("")
        self.comboBox_subject_gradepage.addItem("")
        self.comboBox_subject_gradepage.addItem("")
        self.comboBox_subject_gradepage.addItem("")
        self.comboBox_subject_gradepage.addItem("")
        self.comboBox_subject_gradepage.addItem("")
        self.comboBox_subject_gradepage.addItem("")
        self.back_grade = QtWidgets.QPushButton(self.centralwidget)
        self.back_grade.setGeometry(QtCore.QRect(190, 350, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.back_grade.setFont(font)
        self.back_grade.setObjectName("back_grade")
        GradeWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(GradeWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 371, 21))
        self.menubar.setObjectName("menubar")
        GradeWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(GradeWindow)
        self.statusbar.setObjectName("statusbar")
        GradeWindow.setStatusBar(self.statusbar)

        self.retranslateUi(GradeWindow)
        QtCore.QMetaObject.connectSlotsByName(GradeWindow)

    def retranslateUi(self, GradeWindow):
        _translate = QtCore.QCoreApplication.translate
        GradeWindow.setWindowTitle(_translate("GradeWindow", "GradeWindow"))
        self.heading_label_gradepage.setText(_translate("GradeWindow", "Add Grades of Student:"))
        self.comboBox_grade_gradepage.setItemText(0, _translate("GradeWindow", "A+"))
        self.comboBox_grade_gradepage.setItemText(1, _translate("GradeWindow", "A"))
        self.comboBox_grade_gradepage.setItemText(2, _translate("GradeWindow", "A-"))
        self.comboBox_grade_gradepage.setItemText(3, _translate("GradeWindow", "B+"))
        self.comboBox_grade_gradepage.setItemText(4, _translate("GradeWindow", "B"))
        self.comboBox_grade_gradepage.setItemText(5, _translate("GradeWindow", "B-"))
        self.comboBox_grade_gradepage.setItemText(6, _translate("GradeWindow", "C+"))
        self.comboBox_grade_gradepage.setItemText(7, _translate("GradeWindow", "C"))
        self.comboBox_grade_gradepage.setItemText(8, _translate("GradeWindow", "C-"))
        self.comboBox_grade_gradepage.setItemText(9, _translate("GradeWindow", "D+"))
        self.comboBox_grade_gradepage.setItemText(10, _translate("GradeWindow", "D"))
        self.comboBox_grade_gradepage.setItemText(11, _translate("GradeWindow", "F"))
        self.regnumber_label_gradepage.setText(_translate("GradeWindow", "Registration Number of Student:"))
        self.subject_label_gradepage.setText(_translate("GradeWindow", "Choose the Subject:"))
        self.addGrade_gradepage.setText(_translate("GradeWindow", "Add Grade"))
        self.grade_label_gradepage.setText(_translate("GradeWindow", "Choose Grade Given Below:"))
        self.comboBox_subject_gradepage.setItemText(0, _translate("GradeWindow", "Mathematics"))
        self.comboBox_subject_gradepage.setItemText(1, _translate("GradeWindow", "Physics"))
        self.comboBox_subject_gradepage.setItemText(2, _translate("GradeWindow", "Chemistry"))
        self.comboBox_subject_gradepage.setItemText(3, _translate("GradeWindow", "Biology"))
        self.comboBox_subject_gradepage.setItemText(4, _translate("GradeWindow", "Pak Studies"))
        self.comboBox_subject_gradepage.setItemText(5, _translate("GradeWindow", "Urdu"))
        self.comboBox_subject_gradepage.setItemText(6, _translate("GradeWindow", "English"))
        self.comboBox_subject_gradepage.setItemText(7, _translate("GradeWindow", "Islamic Studies"))
        self.back_grade.setText(_translate("GradeWindow", "Back"))
        self.back_grade.clicked.connect(self.back)
        self.addGrade_gradepage.clicked.connect(self.addGrade)
        
    def back(self):
        GradeWindow.hide()
        ActionWindow.show()
        
    def addGrade(self):
        regnumber = self.regnumber_input_gradepage.text()
        subject = self.comboBox_subject_gradepage.currentText()
        grade = self.comboBox_grade_gradepage.currentText()
        if regnumber == "" or subject == "" or grade == "":
            self.messagebox = QtWidgets.QMessageBox()
            self.messagebox.setIcon(QtWidgets.QMessageBox.Information)
            self.messagebox.setText("Please fill all the fields")
            self.messagebox.setWindowTitle("Error")
            self.messagebox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            self.messagebox.exec_()
        
        elif regnumber and subject and grade:
            self.regnumber_input_gradepage.clear()
            self.comboBox_subject_gradepage.clear()
            self.comboBox_grade_gradepage.clear()
            self.GradeMethod(regnumber, subject, grade)
        
    def GradeMethod(self, regnumber, subject, grade):
        rows = []
        found = False
        subject_columns = {
            'Mathematics': 10,
            'Chemistry': 11,
            'Physics': 12,
            'Biology': 13,
            'Pak Studies': 14,
            'Urdu': 15,
            'English': 16,
            'Islamic Studies': 17
        }

        with open('./Student_Data.csv', 'r') as file:
            reader = csv.reader(file)
            rows = list(reader)

            for row in rows:
                if row[1] == regnumber:
                    if subject in subject_columns:
                        row[subject_columns[subject]] = grade
                        found = True
                        break
        
        if not found:
            self.messagebox = QtWidgets.QMessageBox()
            self.messagebox.setIcon(QtWidgets.QMessageBox.Information)
            self.messagebox.setText("Registration Number not found")
            self.messagebox.setWindowTitle("Error")
            self.messagebox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            self.messagebox.exec_()
            return
        
        with open('./Student_Data.csv', 'w', newline='') as file:
            writer = csv.writer(file)
            for row in rows:
                writer.writerow(row)
        self.messagebox = QtWidgets.QMessageBox()
        self.messagebox.setIcon(QtWidgets.QMessageBox.Information)
        self.messagebox.setText(f"Data appended to the corresponding subject column for primary key '{regnumber}'.")
        self.messagebox.setWindowTitle("Success")
        self.messagebox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        self.messagebox.exec_()
               
 

            
        


class Ui_AttendanceWindow(object):
    def setupUi(self, AttendanceWindow):
        AttendanceWindow.setObjectName("AttendanceWindow")
        AttendanceWindow.resize(371, 514)
        self.centralwidget = QtWidgets.QWidget(AttendanceWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.heading_label_attendancepage = QtWidgets.QLabel(self.centralwidget)
        self.heading_label_attendancepage.setGeometry(QtCore.QRect(60, 50, 321, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.heading_label_attendancepage.setFont(font)
        self.heading_label_attendancepage.setObjectName("heading_label_attendancepage")
        self.regnumber_label_attendancepage = QtWidgets.QLabel(self.centralwidget)
        self.regnumber_label_attendancepage.setGeometry(QtCore.QRect(70, 100, 231, 21))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.regnumber_label_attendancepage.setFont(font)
        self.regnumber_label_attendancepage.setObjectName("regnumber_label_attendancepage")
        self.regnumber_input_attendancepage = QtWidgets.QLineEdit(self.centralwidget)
        self.regnumber_input_attendancepage.setGeometry(QtCore.QRect(70, 130, 231, 31))
        self.regnumber_input_attendancepage.setObjectName("regnumber_input_attendancepage")
        self.date_label_attendancepage = QtWidgets.QLabel(self.centralwidget)
        self.date_label_attendancepage.setGeometry(QtCore.QRect(70, 180, 231, 21))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.date_label_attendancepage.setFont(font)
        self.date_label_attendancepage.setObjectName("date_label_attendancepage")
        self.addAttendance_attendancepage = QtWidgets.QPushButton(self.centralwidget)
        self.addAttendance_attendancepage.setGeometry(QtCore.QRect(130, 430, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.addAttendance_attendancepage.setFont(font)
        self.addAttendance_attendancepage.setObjectName("addAttendance_attendancepage")
        self.month_label_attendancepage = QtWidgets.QLabel(self.centralwidget)
        self.month_label_attendancepage.setGeometry(QtCore.QRect(70, 260, 231, 21))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.month_label_attendancepage.setFont(font)
        self.month_label_attendancepage.setObjectName("month_label_attendancepage")
        self.comboBox__date_attendancepage = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox__date_attendancepage.setGeometry(QtCore.QRect(70, 210, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.comboBox__date_attendancepage.setFont(font)
        self.comboBox__date_attendancepage.setObjectName("comboBox__date_attendancepage")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.comboBox__date_attendancepage.addItem("")
        self.attendance_label_attendancepage = QtWidgets.QLabel(self.centralwidget)
        self.attendance_label_attendancepage.setGeometry(QtCore.QRect(70, 340, 231, 21))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(9)
        self.attendance_label_attendancepage.setFont(font)
        self.attendance_label_attendancepage.setObjectName("attendance_label_attendancepage")
        self.comboBox_attendance_attendancepage = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_attendance_attendancepage.setGeometry(QtCore.QRect(70, 370, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.comboBox_attendance_attendancepage.setFont(font)
        self.comboBox_attendance_attendancepage.setObjectName("comboBox_attendance_attendancepage")
        self.comboBox_attendance_attendancepage.addItem("")
        self.comboBox_attendance_attendancepage.addItem("")
        self.comboBox_attendance_attendancepage.addItem("")
        self.comboBox_month_attendancepage = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_month_attendancepage.setGeometry(QtCore.QRect(70, 290, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.comboBox_month_attendancepage.setFont(font)
        self.comboBox_month_attendancepage.setObjectName("comboBox_month_attendancepage")
        self.comboBox_month_attendancepage.addItem("")
        self.comboBox_month_attendancepage.addItem("")
        self.comboBox_month_attendancepage.addItem("")
        self.comboBox_month_attendancepage.addItem("")
        self.comboBox_month_attendancepage.addItem("")
        self.comboBox_month_attendancepage.addItem("")
        self.comboBox_month_attendancepage.addItem("")
        self.comboBox_month_attendancepage.addItem("")
        self.comboBox_month_attendancepage.addItem("")
        self.comboBox_month_attendancepage.addItem("")
        self.comboBox_month_attendancepage.addItem("")
        self.comboBox_month_attendancepage.addItem("")
        AttendanceWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(AttendanceWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 371, 21))
        self.menubar.setObjectName("menubar")
        AttendanceWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(AttendanceWindow)
        self.statusbar.setObjectName("statusbar")
        AttendanceWindow.setStatusBar(self.statusbar)

        self.retranslateUi(AttendanceWindow)
        QtCore.QMetaObject.connectSlotsByName(AttendanceWindow)

    def retranslateUi(self, AttendanceWindow):
        _translate = QtCore.QCoreApplication.translate
        AttendanceWindow.setWindowTitle(_translate("AttendanceWindow", "AttendanceWindow"))
        self.heading_label_attendancepage.setText(_translate("AttendanceWindow", "Add Attendance of Student:"))
        self.regnumber_label_attendancepage.setText(_translate("AttendanceWindow", "Registration Number of Student:"))
        self.date_label_attendancepage.setText(_translate("AttendanceWindow", "Choose the Date:"))
        self.addAttendance_attendancepage.setText(_translate("AttendanceWindow", "Add Attendance"))
        self.month_label_attendancepage.setText(_translate("AttendanceWindow", "Choose Month:"))
        self.comboBox__date_attendancepage.setItemText(0, _translate("AttendanceWindow", "01"))
        self.comboBox__date_attendancepage.setItemText(1, _translate("AttendanceWindow", "02"))
        self.comboBox__date_attendancepage.setItemText(2, _translate("AttendanceWindow", "03"))
        self.comboBox__date_attendancepage.setItemText(3, _translate("AttendanceWindow", "04"))
        self.comboBox__date_attendancepage.setItemText(4, _translate("AttendanceWindow", "05"))
        self.comboBox__date_attendancepage.setItemText(5, _translate("AttendanceWindow", "06"))
        self.comboBox__date_attendancepage.setItemText(6, _translate("AttendanceWindow", "07"))
        self.comboBox__date_attendancepage.setItemText(7, _translate("AttendanceWindow", "08"))
        self.comboBox__date_attendancepage.setItemText(8, _translate("AttendanceWindow", "09"))
        self.comboBox__date_attendancepage.setItemText(9, _translate("AttendanceWindow", "10"))
        self.comboBox__date_attendancepage.setItemText(10, _translate("AttendanceWindow", "11"))
        self.comboBox__date_attendancepage.setItemText(11, _translate("AttendanceWindow", "12"))
        self.comboBox__date_attendancepage.setItemText(12, _translate("AttendanceWindow", "13"))
        self.comboBox__date_attendancepage.setItemText(13, _translate("AttendanceWindow", "14"))
        self.comboBox__date_attendancepage.setItemText(14, _translate("AttendanceWindow", "15"))
        self.comboBox__date_attendancepage.setItemText(15, _translate("AttendanceWindow", "16"))
        self.comboBox__date_attendancepage.setItemText(16, _translate("AttendanceWindow", "17"))
        self.comboBox__date_attendancepage.setItemText(17, _translate("AttendanceWindow", "18"))
        self.comboBox__date_attendancepage.setItemText(18, _translate("AttendanceWindow", "19"))
        self.comboBox__date_attendancepage.setItemText(19, _translate("AttendanceWindow", "20"))
        self.comboBox__date_attendancepage.setItemText(20, _translate("AttendanceWindow", "21"))
        self.comboBox__date_attendancepage.setItemText(21, _translate("AttendanceWindow", "22"))
        self.comboBox__date_attendancepage.setItemText(22, _translate("AttendanceWindow", "23"))
        self.comboBox__date_attendancepage.setItemText(23, _translate("AttendanceWindow", "24"))
        self.comboBox__date_attendancepage.setItemText(24, _translate("AttendanceWindow", "25"))
        self.comboBox__date_attendancepage.setItemText(25, _translate("AttendanceWindow", "26"))
        self.comboBox__date_attendancepage.setItemText(26, _translate("AttendanceWindow", "27"))
        self.comboBox__date_attendancepage.setItemText(27, _translate("AttendanceWindow", "28"))
        self.comboBox__date_attendancepage.setItemText(28, _translate("AttendanceWindow", "29"))
        self.comboBox__date_attendancepage.setItemText(29, _translate("AttendanceWindow", "30"))
        self.comboBox__date_attendancepage.setItemText(30, _translate("AttendanceWindow", "31"))
        self.attendance_label_attendancepage.setText(_translate("AttendanceWindow", "Attendance Status:"))
        self.comboBox_attendance_attendancepage.setItemText(0, _translate("AttendanceWindow", "Present"))
        self.comboBox_attendance_attendancepage.setItemText(1, _translate("AttendanceWindow", "Attendance"))
        self.comboBox_attendance_attendancepage.setItemText(2, _translate("AttendanceWindow", "Leave"))
        self.comboBox_month_attendancepage.setItemText(0, _translate("AttendanceWindow", "January 2023"))
        self.comboBox_month_attendancepage.setItemText(1, _translate("AttendanceWindow", "February 2023"))
        self.comboBox_month_attendancepage.setItemText(2, _translate("AttendanceWindow", "March 2023"))
        self.comboBox_month_attendancepage.setItemText(3, _translate("AttendanceWindow", "April 2023"))
        self.comboBox_month_attendancepage.setItemText(4, _translate("AttendanceWindow", "May 2023"))
        self.comboBox_month_attendancepage.setItemText(5, _translate("AttendanceWindow", "June 2023"))
        self.comboBox_month_attendancepage.setItemText(6, _translate("AttendanceWindow", "July 2023"))
        self.comboBox_month_attendancepage.setItemText(7, _translate("AttendanceWindow", "August 2023"))
        self.comboBox_month_attendancepage.setItemText(8, _translate("AttendanceWindow", "September 2023"))
        self.comboBox_month_attendancepage.setItemText(9, _translate("AttendanceWindow", "October 2023"))
        self.comboBox_month_attendancepage.setItemText(10, _translate("AttendanceWindow", "November 2023"))
        self.comboBox_month_attendancepage.setItemText(11, _translate("AttendanceWindow", "December 2023"))
        
        self.addAttendance_attendancepage.clicked.connect(self.addAttendance)

    def addAttendance(self):
        pass



class LectureDataWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Lecture Data")

        self.registration_label = QLabel("Registration Number:")
        self.registration_input = QLineEdit()

        self.lecture1_label = QLabel("Lecture 1:")
        self.lecture1_input = QLineEdit()

        self.lecture2_label = QLabel("Lecture 2:")
        self.lecture2_input = QLineEdit()

        self.lecture3_label = QLabel("Lecture 3:")
        self.lecture3_input = QLineEdit()

        self.lecture4_label = QLabel("Lecture 4:")
        self.lecture4_input = QLineEdit()

        self.save_button = QPushButton("Save Data")
        self.save_button.clicked.connect(self.save_data)
        
        self.back_button = QPushButton("Back")
        self.back_button.clicked.connect(self.back)
        
        
        font = QFont("Poppins", 12)
        self.registration_label.setFont(font)
        self.lecture1_label.setFont(font)
        self.lecture2_label.setFont(font)
        self.lecture3_label.setFont(font)
        self.lecture4_label.setFont(font)
        self.registration_input.setFont(font)
        self.lecture1_input.setFont(font)
        self.lecture2_input.setFont(font)
        self.lecture3_input.setFont(font)
        self.lecture4_input.setFont(font)
        self.save_button.setFont(font)
        self.save_button.setStyleSheet(
            "QPushButton { padding: 8px 16px; margin-top: 20px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; }"
            "QPushButton:hover { background-color: #45a049; }"
        )
        self.back_button.setFont(font)
        self.back_button.setStyleSheet(
            "QPushButton { padding: 8px 16px; margin-top: 20px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; }"
            "QPushButton:hover { background-color: #45a049;}"
        )
    
    

        layout = QVBoxLayout()
        layout.addWidget(self.registration_label)
        layout.addWidget(self.registration_input)
        layout.addWidget(self.lecture1_label)
        layout.addWidget(self.lecture1_input)
        layout.addWidget(self.lecture2_label)
        layout.addWidget(self.lecture2_input)
        layout.addWidget(self.lecture3_label)
        layout.addWidget(self.lecture3_input)
        layout.addWidget(self.lecture4_label)
        layout.addWidget(self.lecture4_input)
        layout.addWidget(self.save_button)
        layout.addWidget(self.back_button)

        central_widget = QWidget()
        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)

    def save_data(self):
        registration_number = self.registration_input.text()
        lecture1_data = self.lecture1_input.text()
        lecture2_data = self.lecture2_input.text()
        lecture3_data = self.lecture3_input.text()
        lecture4_data = self.lecture4_input.text()

        # Check if registration number exists in the CSV file
        with open('Student_Data.csv', 'r') as file:
            reader = csv.reader(file)
            data = list(reader)
            for row in data:
                if len(row) > 1 and row[1] == registration_number:
                    # Store lecture data in CSV file
                    row[31:35] = [lecture1_data, lecture2_data, lecture3_data, lecture4_data]
                    with open('Student_Data.csv', 'w', newline='') as file:
                        writer = csv.writer(file)
                        writer.writerows(data)
                        self.messagebox = QtWidgets.QMessageBox()
                        self.messagebox.setIcon(QtWidgets.QMessageBox.Information)
                        self.messagebox.setText("Your details have been saved successfully!")
                        self.messagebox.setWindowTitle("Success")
                        self.messagebox.setStandardButtons(QtWidgets.QMessageBox.Ok)
                        self.messagebox.exec_()
                    break
                # else:
                #     self.messagebox = QtWidgets.QMessageBox()
                #     self.messagebox.setIcon(QtWidgets.QMessageBox.Information)
                #     self.messagebox.setText("Incorrect Registration Number!")
                #     self.messagebox.setWindowTitle("Error")
                #     self.messagebox.setStandardButtons(QtWidgets.QMessageBox.Ok)
                #     self.messagebox.exec_()
                

    def back(self):
        AddTimeWindow.hide()
        ActionWindow.show()
    


class CSVViewer(QMainWindow):
    def setup_ui(self):
        self.setWindowTitle("CSV Viewer")
        self.resize(600, 400)

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        self.layout = QVBoxLayout()
        self.central_widget.setLayout(self.layout)

        self.table = QTableWidget()
        self.layout.addWidget(self.table)

        self.load_data()
        self.apply_style()

    def load_data(self):
        with open('Student_Data.csv', 'r') as file:
            reader = csv.reader(file)
            data = list(reader)

        header_labels = ['Reg Number', 'Lecture 01', 'Lecture 02', 'Lecture 03', 'Lecture 04']
        self.table.setColumnCount(len(header_labels))
        self.table.setHorizontalHeaderLabels(header_labels)

        for row in data[1:]:
            reg_number = row[1]
            lecture1 = row[30]
            lecture2 = row[31]
            lecture3 = row[32]
            lecture4 = row[33]

            row_position = self.table.rowCount()
            self.table.insertRow(row_position)

            item_reg_number = QTableWidgetItem(reg_number)
            item_lecture1 = QTableWidgetItem(lecture1)
            item_lecture2 = QTableWidgetItem(lecture2)
            item_lecture3 = QTableWidgetItem(lecture3)
            item_lecture4 = QTableWidgetItem(lecture4)

            item_reg_number.setTextAlignment(Qt.AlignCenter)
            item_lecture1.setTextAlignment(Qt.AlignCenter)
            item_lecture2.setTextAlignment(Qt.AlignCenter)
            item_lecture3.setTextAlignment(Qt.AlignCenter)
            item_lecture4.setTextAlignment(Qt.AlignCenter)

            self.table.setItem(row_position, 0, item_reg_number)
            self.table.setItem(row_position, 1, item_lecture1)
            self.table.setItem(row_position, 2, item_lecture2)
            self.table.setItem(row_position, 3, item_lecture3)
            self.table.setItem(row_position, 4, item_lecture4)

    def apply_style(self):
        font = QFont("Poppins", 12)
        self.table.setFont(font)

        header_font = QFont("Poppins", 12, QFont.Bold)
        self.table.horizontalHeader().setFont(header_font)

        self.table.horizontalHeader().setStyleSheet(
            "QHeaderView::section { background-color: #333; color: white; }"
        )

        self.table.verticalHeader().setVisible(False)

        even_color = QColor(240, 240, 240)
        odd_color = QColor(220, 220, 220)
        for i in range(self.table.rowCount()):
            for j in range(self.table.columnCount()):
                item = self.table.item(i, j)
                if item is not None:
                    if i % 2 == 0:
                        item.setBackground(even_color)
                    else:
                        item.setBackground(odd_color)
                    item.setForeground(Qt.black)
                    
                    
        column_widths = [180, 100, 100, 100, 100]  # Adjust the widths as per your preference
        for i, width in enumerate(column_widths):
            self.table.setColumnWidth(i, width)


class CSVWindow(QMainWindow):
    def setup_ui(self):
        self.setWindowTitle("Data Table")
        self.setGeometry(100, 100, 800, 600)

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        self.layout = QVBoxLayout()
        self.central_widget.setLayout(self.layout)

        self.input_label = QLabel("Enter Registration Number:")
        self.input_text = QLineEdit()
        self.submit_button = QPushButton("Submit")
        self.submit_button.clicked.connect(self.load_data)

        self.layout.addWidget(self.input_label)
        self.layout.addWidget(self.input_text)
        self.layout.addWidget(self.submit_button)

        self.table = QTableWidget()
        self.layout.addWidget(self.table)

        self.apply_style()

    def load_data(self):
        reg_number = self.input_text.text()

        with open('Student_Data.csv', 'r') as file:
            reader = csv.reader(file)
            data = list(reader)

        headers = data[0]  # Get the headers from the first row
        data = data[1:]  # Remove the first row from the data

        found = False
        for row in data:
            if row[1] == reg_number:
                self.table.setColumnCount(len(row))
                self.table.setRowCount(1)
                self.table.setHorizontalHeaderLabels(headers)

                for i, col in enumerate(row):
                    item = QTableWidgetItem(col)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.table.setItem(0, i, item)
                found = True
                break

    
        if not found:
            self.table.setColumnCount(1)
            self.table.setRowCount(1)
            self.table.setHorizontalHeaderLabels(["Registration Number"])
            item = QTableWidgetItem("Registration Number Not Found")
            item.setForeground(QBrush(Qt.red))
            item.setTextAlignment(Qt.AlignCenter)
            self.table.setItem(0, 0, item)

    def apply_style(self):
        font = QFont("Poppins", 12)  # Use Poppins font
        self.input_label.setFont(font)
        self.input_text.setFont(font)
        self.submit_button.setFont(font)

        self.table.setFont(font)
        self.table.horizontalHeader().setFont(font)
        self.table.horizontalHeader().setStyleSheet(
            "QHeaderView::section { background-color: #333; color: white; padding: 6px; }"
        )
        self.table.verticalHeader().setVisible(False)
        self.table.setAlternatingRowColors(True)
        self.table.setStyleSheet(
            "QTableWidget::item { padding: 10px; }"
        )
        even_color = QColor(240, 240, 240)
        odd_color = QColor(220, 220, 220)
        for i in range(self.table.rowCount()):
            for j in range(self.table.columnCount()):
                item = self.table.item(i, j)
                if item is not None:
                    if i % 2 == 0:
                        item.setBackground(even_color)
                    else:
                        item.setBackground(odd_color)
                    item.setForeground(Qt.black)

        for j in range(self.table.columnCount()):
            self.table.setColumnWidth(j, 150)




class DataTableWindow(QMainWindow):
    def setup_ui(self):
        self.setWindowTitle("Data Table")
        self.table = QTableWidget(self)
        self.load_data()
        self.apply_style()
        self.setCentralWidget(self.table)
        self.resize(800, 600)

    def load_data(self):
        with open('Student_Data.csv', 'r') as file:
            reader = csv.reader(file)
            data = list(reader)

        num_rows = len(data)
        num_cols = len(data[0]) if data else 0
        self.table.setRowCount(num_rows - 1)
        self.table.setColumnCount(num_cols)
        header_labels = data[0]  # Use the first row as column headers
        self.table.setHorizontalHeaderLabels(header_labels)

        for i, row in enumerate(data[1:]):
            for j, value in enumerate(row):
                item = QTableWidgetItem(value)
                item.setTextAlignment(Qt.AlignCenter)
                self.table.setItem(i, j, item)

    def apply_style(self):
        font = QFont("Poppins", 12)  # Use Poppins font
        self.table.setFont(font)
        self.table.horizontalHeader().setFont(font)
        self.table.horizontalHeader().setStyleSheet(
            "QHeaderView::section { background-color: #333; color: white; padding: 6px; }"
        )
        self.table.verticalHeader().setVisible(False)
        self.table.setAlternatingRowColors(True)
        self.table.setStyleSheet(
            "QTableWidget::item { padding: 10px; }"
        )
        even_color = QColor(240, 240, 240)
        odd_color = QColor(220, 220, 220)
        for i in range(self.table.rowCount()):
            for j in range(self.table.columnCount()):
                item = self.table.item(i, j)
                if item is not None:
                    if i % 2 == 0:
                        item.setBackground(even_color)
                    else:
                        item.setBackground(odd_color)
                    item.setForeground(Qt.black)

        for j in range(self.table.columnCount()):
            self.table.setColumnWidth(j, 150)





if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    LoginWindow = QtWidgets.QMainWindow()
    ui = Ui_LoginWindow()
    ui.setupUi(LoginWindow)
    LoginWindow.setGeometry(500, 180, 498, 395 )
    LoginWindow.show()
    ActionWindow = QtWidgets.QMainWindow()
    Action = Ui_ActionWindow()
    Action.setupUi(ActionWindow)
    ActionWindow.setGeometry(200, 100, 580, 600 )
    StudentRegistrationForm = QtWidgets.QMainWindow()
    AddStudent = Ui_StudentRegistrationForm()
    AddStudent.setupUi(StudentRegistrationForm)
    StudentRegistrationForm.setGeometry(200, 100, 903, 600 )
    FeeWindow = QtWidgets.QMainWindow()
    Fee = Ui_FeeWindow()
    Fee.setupUi(FeeWindow)
    FeeWindow.setGeometry(500, 150, 371, 450)
    RemoveWindow = QtWidgets.QMainWindow()
    dialog = DeleteConfirmationDialog()
    dialog.setup_ui()
    dialog.setGeometry(500, 150, 371, 450)
    GradeWindow = QtWidgets.QMainWindow()
    Grade = Ui_GradeWindow()
    Grade.setupUi(GradeWindow)
    SelectiveWindow = CSVWindow()
    SelectiveWindow.setup_ui()
    SelectiveWindow.setGeometry(400, 200, 800, 300)
    AttendanceWindow = QtWidgets.QMainWindow()
    Attendance = Ui_AttendanceWindow()
    Attendance.setupUi(AttendanceWindow)
    AddTimeWindow = LectureDataWindow()
    AddTimeWindow.setGeometry(500, 100, 400, 400)
    viewer = CSVViewer()
    viewer.setup_ui()
    viewer.setGeometry(400, 100, 600, 300)
    AllStudentsWindow = DataTableWindow()
    AllStudentsWindow.setup_ui()
    AllStudentsWindow.setGeometry(400, 200, 800, 300)
    
    
    sys.exit(app.exec_())
